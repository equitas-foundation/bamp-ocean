// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bamp/v1/cosigner.proto

package bampv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CosignerServiceClient is the client API for CosignerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CosignerServiceClient interface {
	GetXpub(ctx context.Context, in *GetXpubRequest, opts ...grpc.CallOption) (*GetXpubResponse, error)
	GetAssets(ctx context.Context, in *GetAssetsRequest, opts ...grpc.CallOption) (*GetAssetsResponse, error)
	RegisterMultiSig(ctx context.Context, in *RegisterMultiSigRequest, opts ...grpc.CallOption) (*RegisterMultiSigResponse, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error)
}

type cosignerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCosignerServiceClient(cc grpc.ClientConnInterface) CosignerServiceClient {
	return &cosignerServiceClient{cc}
}

func (c *cosignerServiceClient) GetXpub(ctx context.Context, in *GetXpubRequest, opts ...grpc.CallOption) (*GetXpubResponse, error) {
	out := new(GetXpubResponse)
	err := c.cc.Invoke(ctx, "/bamp.v1.CosignerService/GetXpub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerServiceClient) GetAssets(ctx context.Context, in *GetAssetsRequest, opts ...grpc.CallOption) (*GetAssetsResponse, error) {
	out := new(GetAssetsResponse)
	err := c.cc.Invoke(ctx, "/bamp.v1.CosignerService/GetAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerServiceClient) RegisterMultiSig(ctx context.Context, in *RegisterMultiSigRequest, opts ...grpc.CallOption) (*RegisterMultiSigResponse, error) {
	out := new(RegisterMultiSigResponse)
	err := c.cc.Invoke(ctx, "/bamp.v1.CosignerService/RegisterMultiSig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cosignerServiceClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error) {
	out := new(SignTransactionResponse)
	err := c.cc.Invoke(ctx, "/bamp.v1.CosignerService/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CosignerServiceServer is the server API for CosignerService service.
// All implementations should embed UnimplementedCosignerServiceServer
// for forward compatibility
type CosignerServiceServer interface {
	GetXpub(context.Context, *GetXpubRequest) (*GetXpubResponse, error)
	GetAssets(context.Context, *GetAssetsRequest) (*GetAssetsResponse, error)
	RegisterMultiSig(context.Context, *RegisterMultiSigRequest) (*RegisterMultiSigResponse, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error)
}

// UnimplementedCosignerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCosignerServiceServer struct {
}

func (UnimplementedCosignerServiceServer) GetXpub(context.Context, *GetXpubRequest) (*GetXpubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetXpub not implemented")
}
func (UnimplementedCosignerServiceServer) GetAssets(context.Context, *GetAssetsRequest) (*GetAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssets not implemented")
}
func (UnimplementedCosignerServiceServer) RegisterMultiSig(context.Context, *RegisterMultiSigRequest) (*RegisterMultiSigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMultiSig not implemented")
}
func (UnimplementedCosignerServiceServer) SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTransaction not implemented")
}

// UnsafeCosignerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CosignerServiceServer will
// result in compilation errors.
type UnsafeCosignerServiceServer interface {
	mustEmbedUnimplementedCosignerServiceServer()
}

func RegisterCosignerServiceServer(s grpc.ServiceRegistrar, srv CosignerServiceServer) {
	s.RegisterService(&CosignerService_ServiceDesc, srv)
}

func _CosignerService_GetXpub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetXpubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerServiceServer).GetXpub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamp.v1.CosignerService/GetXpub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerServiceServer).GetXpub(ctx, req.(*GetXpubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CosignerService_GetAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerServiceServer).GetAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamp.v1.CosignerService/GetAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerServiceServer).GetAssets(ctx, req.(*GetAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CosignerService_RegisterMultiSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMultiSigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerServiceServer).RegisterMultiSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamp.v1.CosignerService/RegisterMultiSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerServiceServer).RegisterMultiSig(ctx, req.(*RegisterMultiSigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CosignerService_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CosignerServiceServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bamp.v1.CosignerService/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CosignerServiceServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CosignerService_ServiceDesc is the grpc.ServiceDesc for CosignerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CosignerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bamp.v1.CosignerService",
	HandlerType: (*CosignerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetXpub",
			Handler:    _CosignerService_GetXpub_Handler,
		},
		{
			MethodName: "GetAssets",
			Handler:    _CosignerService_GetAssets_Handler,
		},
		{
			MethodName: "RegisterMultiSig",
			Handler:    _CosignerService_RegisterMultiSig_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _CosignerService_SignTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bamp/v1/cosigner.proto",
}
